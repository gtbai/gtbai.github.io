<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[机器学习基石第二讲：Learning to Answer Yes/No 笔记]]></title>
      <url>http://gtbai.github.io/2017/02/09/mlfound-2/</url>
      <content type="html"><![CDATA[<h2 id="perceptron-hypothesis-set">Perceptron Hypothesis Set</h2>
<p>信用卡批准问题回顾： <img src="http://oky5aqxds.bkt.clouddn.com/2-1.png" alt="图2-1"></p>
<p>那么对于这个问题，<span class="math inline">\(H\)</span>究竟长什么样呢？</p>
<p>这里，我们可以把每个用户表示成一个向量： <span class="math display">\[\mathbf{x} = (x_1, x_2, \cdots, x_d)\]</span></p>
<p>并计算一个加权的“分数”：</p>
<ul>
<li>如果<span class="math inline">\(\sum_{i=1}^dw_ix_i &gt; threshold\)</span>，那么批准信用卡的申请</li>
<li>如果<span class="math inline">\(\sum_i=1^dw_ix_i &lt; threshold\)</span>，那么拒绝信用卡的申请</li>
</ul>
<p>输出空间为<span class="math inline">\(Y: \{+1(good), -1(bad)\}\)</span>。边界情况0经常被我们忽略， 因为它很少发生，也不太重要。那么我们的假设就是一个线性函数<span class="math inline">\(h \epsilon H\)</span>： <span class="math display">\[h(x) = sign((\sum_{i=1}^dw_ix_i)-threshold)\]</span> 这个机器学习假设函数被叫做感知机（Perceptron），来源于早期类神经网络的研究者，因为很像人大脑中的一个神经元而得名。</p>
<p>这个<span class="math inline">\(h\)</span>形式略麻烦，这里从符号上进行简化： <img src="http://oky5aqxds.bkt.clouddn.com/2-2.png" alt="图2-2"></p>
<p>使得每一个向量<span class="math inline">\(\mathbf w\)</span>都表示一个假设函数<span class="math inline">\(h\)</span>，而每一个向量<span class="math inline">\(\mathbf x\)</span>都表示一个用户。</p>
<p>这么说起来还是很抽象，那么每一个<span class="math inline">\(h\)</span>到底长什么样呢？这里有一个二维的例子： <img src="http://oky5aqxds.bkt.clouddn.com/2-3.png" alt="图2-3"></p>
<h2 id="perceptron-learning-algorithm-pla">Perceptron Learning Algorithm (PLA)</h2>
<p>现在我们的任务就是从所有的感知机（线、平面等）中选出我们想要的<span class="math inline">\(g\)</span>：</p>
<ul>
<li>我们想要<span class="math inline">\(g \approx f\)</span>。但是很难，因为<span class="math inline">\(f\)</span>我们不知道</li>
<li>我们只知道我们的资料是从<span class="math inline">\(f\)</span>产生的，那我们可以要求在我们所拥有的数据<span class="math inline">\(D\)</span>上，有： <span class="math display">\[g(x_n) = f(x_n) = y_n\]</span></li>
<li>但是即使到这一步了，也不是太容易。因为<span class="math inline">\(H\)</span>无限大</li>
<li>那我们的idea是：从一个不太好的<span class="math inline">\(g_0\)</span>出发，然后不断地参考它在<span class="math inline">\(D\)</span>上的错误 来修正它。 接下来，我们会用<span class="math inline">\(\mathbf w_0\)</span>来代表<span class="math inline">\(g_0\)</span>。</li>
</ul>
<p>那么完整的PLA算法将是这样的： <img src="http://oky5aqxds.bkt.clouddn.com/2-4.png" alt="图2-4"> 其中更新的思路大概是这样：</p>
<ul>
<li>如果在某<span class="math inline">\(\mathbf x\)</span>处，其本身的label是<span class="math inline">\(y=1\)</span>，结果<span class="math inline">\(h\)</span>却输出<span class="math inline">\(y=-1\)</span>， 那么说明<span class="math inline">\(\mathbf w\)</span>和<span class="math inline">\(\mathbf x\)</span>的夹角太<strong>大</strong>，可以在<span class="math inline">\(\mathbf w\)</span>上加上 <span class="math inline">\(y\mathbf x\)</span>让它向<span class="math inline">\(\mathbf x\)</span><strong>靠近</strong>一些。</li>
<li>如果在某<span class="math inline">\(\mathbf x\)</span>处，其本身的label是<span class="math inline">\(y=-1\)</span>，结果<span class="math inline">\(h\)</span>却输出<span class="math inline">\(y=1\)</span>， 那么说明<span class="math inline">\(\mathbf w\)</span>和<span class="math inline">\(\mathbf x\)</span>的夹角太<strong>小</strong>，可以在<span class="math inline">\(\mathbf w\)</span>上加上 <span class="math inline">\(y\mathbf x\)</span>让它向<span class="math inline">\(\mathbf x\)</span><strong>远离</strong>一些。</li>
</ul>
<p>其中的哲学可以说是：</p>
<blockquote>
<p>知错能改，善莫大焉。</p>
</blockquote>
<p>常见的PLA实现方式有：</p>
<h3 id="循环pla">循环PLA</h3>
<ol style="list-style-type: decimal">
<li>对<span class="math inline">\(t=0,1,\ldots\)</span>
<ol style="list-style-type: decimal">
<li>找到<span class="math inline">\(\mathbf{w}_t\)</span>犯的<strong>下一个</strong>错误<span class="math inline">\((x_{n(t)}, y_{n(t)})\)</span> s.t. <span class="math display">\[sign(\mathbf w_t^T \mathbf x_{n(t)}) \neq y_{n(t)}\]</span></li>
<li>按照以下方式纠正这个错误： <span class="math display">\[\mathbf w_{t+1} \leftarrow \mathbf w_{t}+y_{n(t)}\mathbf x_{n(t)}\]</span></li>
</ol></li>
<li>直到在一轮完整的循环中找不到错误</li>
</ol>
<p>其中<strong>下一个</strong>既可以按照自然循环顺序<span class="math inline">\((1,2,\cdots,N)\)</span>来遍历，也可以通过提前计算的随机循环顺序来遍历。</p>
<p>既然演算法停的时候就会找出一个好的Perceptron，那么：</p>
<ul>
<li>算法一定会停吗？
<ul>
<li>按照自然循环会停吗？</li>
<li>按照随机循环会停吗？</li>
<li>其他的变种循环方式会停吗？</li>
</ul></li>
<li>以及，<span class="math inline">\(g\)</span>和<span class="math inline">\(f\)</span>像吗？
<ul>
<li>就算在训练集<span class="math inline">\(D\)</span>上想像，在<span class="math inline">\(D\)</span>以外像吗？</li>
<li>如果在<span class="math inline">\(D\)</span>上不停的话，<span class="math inline">\(g\)</span>和<span class="math inline">\(f\)</span>的关系又会怎么样呢？</li>
</ul></li>
</ul>
<p>我们接下来试图证明，在一些情况下，循环过足够多次数后，<strong>PLA总会停下来</strong>。</p>
<h2 id="guarantee-of-pla">Guarantee of PLA</h2>
<p><strong>线性可分</strong></p>
<blockquote>
<p>如果PLA能停下来，那么一个必要条件是数据集<span class="math inline">\(D\)</span>允许某个<span class="math inline">\(\mathbf{w}\)</span>不犯错误，此时我们称<span class="math inline">\(D\)</span>为<strong>线性可分</strong>。</p>
</blockquote>
<p>那么假设数据集<span class="math inline">\(D\)</span>是线性可分的，PLA一定会停吗？</p>
<p>线性可分 <span class="math inline">\(\Leftrightarrow\)</span> 存在一个完美的<span class="math inline">\(\mathbf w_f\)</span>使得<span class="math inline">\(y_n = sign(\mathbf w_f^T \mathbf x_n)\)</span>. <span class="math inline">\(\mathbf w_f\)</span>是完美的，因此每一个<span class="math inline">\(\mathbf x_n\)</span>都完美地远离分界线： <span class="math display">\[y_{n(t)}\mathbf w_f^T \mathbf x_{n(t)} &gt; \min_n y_n\mathbf w_f^T \mathbf x_n &gt; 0 \]</span> 通过对于任意的错误<span class="math inline">\((x_{n(t)}, y_{n(t)})\)</span>更新，我们有： <span class="math display">\[
    \begin{align}
        \mathbf{w}_f^T\cdot{\mathbf w_{t+1}} &amp; = \mathbf w_f^T(\mathbf w_t + y_{n(t)}\mathbf x_{n(t)}) \\
                    &amp; \ge \mathbf w_f^T\mathbf w_t + \min_{n}y_n\mathbf w_f^T\mathbf x_n \\
                    &amp; &gt; \mathbf{w}_f^T\mathbf{w}_t + 0
    \end{align}
    \]</span> 上面的结果实际上表明，每次纠正错误后，<span class="math inline">\(\mathbf{w}_f\)</span>和<span class="math inline">\(\mathbf{w}_t\)</span>的内积变大了。可能有两个原因：</p>
<ul>
<li><span class="math inline">\(\mathbf{w}_f\)</span>和<span class="math inline">\(\mathbf{w}_t\)</span>的夹角变小了。</li>
<li><span class="math inline">\(\mathbf{w}_t\)</span>的长度变大了。</li>
</ul>
<p>我们当然希望是第一种情况发生了，这样我们就能说明<span class="math inline">\(\mathbf{w}_t\)</span>在不断向<span class="math inline">\(\mathbf{w}_f\)</span>靠近。那么我们如何说明呢？</p>
<p>我们还没有利用一个性质，那就是$_t $ 在 <span class="math inline">\((\mathbf{x}_{n(t)}, y_{n(t)})\)</span>处犯了错误： <span class="math display">\[ sign(\mathbf{w}_t^T\mathbf{x}_{n(t)}) \neq y_{n(t)} \Leftrightarrow
       y_{n(t)}\mathbf{w}_t^T\mathbf{x}_{n(t)} \le 0 \]</span></p>
<p>我们可以利用这个性质证明：<span class="math inline">\(\mathbf{w}_t\)</span>其实变长的不太快，即使是关于<strong>最长的</strong><span class="math inline">\(\mathbf{x}_n\)</span>进行更新时： <span class="math display">\[
    \begin{align}
    {\|\mathbf{w}_{t+1}\|}^2 &amp; = {\|\mathbf{w}_{t} +y_{n(t)} \mathbf{x}_{n(t)}\|}^2 \\
                             &amp; = {\|\mathbf{w}_{t}\|}^2 + 2y_{n(t)}\mathbf{w}_{t}^T\mathbf{x}_{n(t)} + {\| y_{n(t)}\mathbf{x}_{n(t)} \|}^2 \\
                             &amp; \le {\|\mathbf{w}_{t}\|}^2 + 0 + {\| y_{n(t)}\mathbf{x}_{n(t)} \|}^2 \\
                             &amp; \le {\|\mathbf{w}_{t}\|}^2 + \max_n{\| y_n\mathbf{x}_n \|}^2 \\
                             &amp; \le {\|\mathbf{w}_{t}\|}^2 + \max_n{\|\mathbf{x}_n \|}^2
    \end{align}
    \]</span> 如此一来，我们便排除了第二种情况，说明了随着循环次数的增长，<span class="math inline">\(\mathbf{w}_f\)</span>和<span class="math inline">\(\mathbf{w}_t\)</span>的夹角不断变小。</p>
<p>这里老师还留了一个有趣的小问题。从<span class="math inline">\(\mathbf{w}_{0}=\mathbf{0}\)</span>开始，经过<span class="math inline">\(T\)</span>次错误纠正，我们有： <span class="math display">\[\frac{\mathbf{w}_f^T}{\|\mathbf{w}_f\|} \frac{\mathbf{w}_T}{\|\mathbf{w}_T\|} \ge \sqrt{T}\cdot{constant}\]</span> 问这个<span class="math inline">\(constant\)</span>应该是多少。 这个问题不算太难，通过上面的两个不等式，经过推导，我们可以得到： 
    $$constant = \frac {\min_n y_{n}\mathbf{w}_f^T\mathbf{x}_n} {{\|\mathbf{w}_{f}\|}^2 \max_n {\|\mathbf{x}_n \|}^2}$$
    </p>
<h2 id="non-seperable-data">Non-Seperable Data</h2>
<p>上面我们证明了，只要我们的数据是<strong>线性可分</strong>，且每次都<strong>修正一个错误</strong>：</p>
<ul>
<li><span class="math inline">\(\mathbf{w}_f\)</span>和<span class="math inline">\(\mathbf{w}_t\)</span><strong>的内积快速变大</strong>，而且<strong><span class="math inline">\(\mathbf{w}_t\)</span></strong>的长度增长的不快</li>
<li>也就是说：PLA这条线越来越接近<span class="math inline">\(\mathbf{w}_f\)</span>直到停止</li>
</ul>
<p>这样的好处是：<strong>实现很简单，对任何纬度<span class="math inline">\(d\)</span>都work。</strong></p>
<p>坏处是：</p>
<ul>
<li><strong>不知道会不会停下来</strong>（因为不知道<span class="math inline">\(\mathbf{w}_f\)</span>）。</li>
<li><strong>就算知道会停下来，也不知道多久会停下来</strong>（因为计算<span class="math inline">\(\rho\)</span>需要用到<span class="math inline">\(\mathbf{w}_f\)</span>）。</li>
</ul>
<p>那如果我们的数据集不是线性可分的话，我们怎么办呢？也就是用<strong>噪声数据</strong>进行学习： <img src="http://oky5aqxds.bkt.clouddn.com/2-5.png" alt="图2-5"></p>
<p>假设噪声是<strong>“小”</strong>的，即大部分情况下<span class="math inline">\(y_n = f(\mathbf{x}_n)\)</span>。 如果这样的话，那么我们也希望我们求得的<span class="math inline">\(g\)</span>在大部分情况下有<span class="math inline">\(y_n = g(\mathbf{x}_n)\)</span>。 于是，我们可以这样来求<span class="math inline">\(\mathbf{w}_g\)</span>： <span class="math display">\[\mathbf{w}_g \leftarrow \mathop{\arg\min}_{\mathbf{w}} \sum_{n=1}^{N}(y_n \neq sign(\mathbf{w}^T\mathbf{x}_n))\]</span> 但是很不幸，这个问题被证明是NP-hard的。</p>
<p>那么既然不好找到精确解，我们能不能通过修改PLA来近似地找到一个还能接受的g呢？</p>
<h3 id="pocket-algorithm">Pocket Algorithm</h3>
<blockquote>
<p>把最好的那条线抓在手上。</p>
</blockquote>
<ol style="list-style-type: decimal">
<li>初始化Pocket权重为<span class="math inline">\(\hat{\mathbf{w}}\)</span></li>
<li>对<span class="math inline">\(t = 0, 1, \cdots\)</span>
<ol style="list-style-type: decimal">
<li>（随机）找到<span class="math inline">\(\mathbf{w}_t\)</span>所犯的一个错误<span class="math inline">\((\mathbf(x)_{n(t)}, y_{n(t)})\)</span></li>
<li>（尝试）通过以下方法修复错误： <span class="math display">\[ \mathbf{w}_{t+1} \leftarrow \mathbf{w}_{t} + y_{n(t)}\mathbf{x}_{n(t)} \]</span></li>
<li>如果<span class="math inline">\(\mathbf{w}_{t+1}\)</span>比<span class="math inline">\(\hat{\mathbf{w}}\)</span>犯的错误还要少，那么我们用前者来替换后者。</li>
</ol></li>
</ol>
<p>直到经过了<strong>足够多次循环</strong>。 返回<span class="math inline">\(\hat{\mathbf{w}}\)</span>（我们称为<span class="math inline">\(\mathbf{w}_{POCKET}\)</span>）为我们所求的<span class="math inline">\(g\)</span>。</p>
<p>已有理论能够证明，如果数据集线性可分，那么PLA可以做得很好；如果不线性可分，那么Pocket Algorithm将会做得还不错。</p>
<h2 id="summary">Summary</h2>
<div class="figure">
<img src="http://oky5aqxds.bkt.clouddn.com/2-6.png" alt="图2-6">
<p class="caption">图2-6</p>
</div>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[机器学习基石第一讲：The Learning Problem 笔记]]></title>
      <url>http://gtbai.github.io/2017/02/06/mlfound-1/</url>
      <content type="html"><![CDATA[<p>此系列博客将记录我在学习<a href="http://www.csie.ntu.edu.tw/~htlin/mooc/" target="_blank" rel="external">《机器学习基石》</a>课程时的学习笔记。<a href="http://www.csie.ntu.edu.tw/~htlin/mooc/" target="_blank" rel="external">《机器学习基石》</a>课程由国立台湾大学林轩田老师在Cousera网站上开设，试图从概率论的角度介绍机器学习。我曾在16年夏季学期在Cousera网站上跟过此课程。当时因为懒惰，没有记录笔记。如今半年过去，课程内容已被我忘记大半。如今从头开始，认真整理笔记。目的是帮助我自己更好地理解和记忆课程知识，同时也希望能给学习本课程的同学提供一些帮助。</p>
<h1 id="第一讲the-learning-problem">第一讲：The Learning Problem</h1>
<h2 id="course-introduction">Course Introduction</h2>
<p>课程将会像讲故事一样，阐述四个问题：</p>
<ul>
<li><strong>When</strong> Can Machines Learn? (illustrative + technique)</li>
<li><strong>Why</strong> Can Machines Learn? (theoretical + illustrative)</li>
<li><strong>How</strong> Can Machines Learn? (technical + practical)</li>
<li>How Can Machines Learn <strong>Better</strong>? (practical + theoretical)</li>
</ul>
<h2 id="what-is-machine-learning">What is Machine Learning</h2>
<p>什么是学习： <img src="http://oky5aqxds.bkt.clouddn.com/1-1.png" alt="图1-1"> 什么是机器学习： <img src="http://oky5aqxds.bkt.clouddn.com/1-2.png" alt="图1-2"> 上面两个定义中都提到了<strong>技巧（Skill）</strong>这个概念，那么技巧是什么意思呢？</p>
<blockquote>
<p>技巧就是一种表现的增进（比如预测精度的增进）。</p>
</blockquote>
<p>这里提到了一个机器学习的应用场景：通过输入历史股票价格数据到机器，机器能够通过机器学习算法预测未来的股票走势，向我们建议好的投资方案。当我们按照这个方案去投资，就能获得更多的投资回报。</p>
<p>那么我们为什么要用机器学习，而不用其他理工科的工具呢？这里又有另一个机器学习的例子：辨识树。让你写一个程序，来辨识一个图里面有没有一棵树。那么如果你要用100条规则定义一棵树，这个任务将很难完成。而想一下我们小时候是怎么学习辨认树的：绝不是父母一下告诉我们100规则，然后我们通过这100条规则来辨认树。而是我们通过每天的观察，逐渐总结出来一些经验学习到的。这个例子也提醒我们：在完成有些任务（比如辨识树），特别是比较复杂的任务时，可能构造一个基于机器学习的系统比构造一个基于手写规则的系统更简单。</p>
<p>前面的例子启发我们，机器学习可能会应用在下列场景中：</p>
<ul>
<li>When human cannot program the system manually. 比如为一个探索火星的机器人编程。人们从来没有到过火星，不可能写程序来应对火星上所有的状况。</li>
<li>When human cannot ‘define the solution’ easily. 比如语音／视觉识别。人们可能无法准确定义出某一段声音信号是在由哪个字发出的。</li>
<li>When needing rapid decisions that humans cannot do. 比如股市超高频交易。人类不可能在10几秒中的时间内准确决定是要买还是要卖。</li>
<li>When needing to be user-oriented in a massive scale. 比如针对用户的市场服务。人们没办法通过写程序照顾到每一个不同顾客的个性化需求。</li>
</ul>
<blockquote>
<p>机器学习就像授机器以渔，而不是授机器以鱼。</p>
</blockquote>
<p>问题适合使用机器学习的三个关键特征：</p>
<ul>
<li>存在潜藏的模式可以学习 - 表现才可以被增进</li>
<li>但是又不知道怎么把它们写下来 - 才需要机器学习</li>
<li>有关于模式的资料 - 机器学习算法才有了输入</li>
</ul>
<h2 id="applications-of-machine-learning">Applications of Machine Learning</h2>
<p>孙中山先生说过：</p>
<blockquote>
<p>民生的需要，從前經濟學家都說是衣、食、住三種。照我的研究，應該有四種：於衣、食、住之外，還有一種就是行。…行就是走路。我們要解決民生問題，不但是要把這四種需要弄到很便宜，並且要全國人民都能夠享受。</p>
</blockquote>
<p>后来蒋介石先生又补充道：</p>
<blockquote>
<p>總理說過：『民生主義要做到少年的人有教育，壯年的人有職業，老年的人有養活，全國男女，無論老小，都可以享安樂』。所以，對於『育幼、養老、濟災、醫病與夫種種公共之需』，乃至『聾啞殘廢院，以濟大造之窮，公共花園，以供暇時之戲』，都要籌畫辦理，『把中國變成一個安樂的國家』，才是民生主義的完成。所以，我們如不把育、樂這兩問題，和食、衣、住、行這四個問題，一併提出研究，就不能概括　總理的民生主義的全部精神與目的之所在。</p>
</blockquote>
<p>因此，<strong>衣食住行育乐</strong>可谓是民生六大需求。而机器学习在这六方面都有所应用：</p>
<ul>
<li>食（Sadilek et al, 2013）
<ul>
<li>数据：推特数据（单词+位置）</li>
<li>技巧：在某个餐厅吃饭会不会食物中毒</li>
</ul></li>
<li>衣（Abu-Mostafa, 2012）
<ul>
<li>数据：销售数据+用户调查</li>
<li>技巧：向用户推荐时尚衣物搭配</li>
</ul></li>
<li>住（Tsanas and Xifara, 2012）
<ul>
<li>数据：房屋的特征和它们的能源消耗</li>
<li>技巧：预测房屋耗能</li>
</ul></li>
<li>行（Stallkamp et al, 2012）
<ul>
<li>数据：一些交通标志和它们的意义</li>
<li>技巧：准确识别交通标志</li>
</ul></li>
<li>育
<ul>
<li>数据：学生在一个数学辅导系统中的答题数据</li>
<li>技巧：预测学生是否会答对某道测验题</li>
<li>一个可能的机器学习算法：回答准确约等于【学生最近的水平 &gt; 题目的难度】
<ul>
<li>喂给数据来自3000名学生的900万条答题记录</li>
<li>机器自动决定学生水平和题目难度<br>
</li>
</ul></li>
</ul></li>
<li>乐 （电影推荐系统）
<ul>
<li>数据：用户给电影的评分</li>
<li>技巧：预测一个用户会怎样给一个系统打分
<ul>
<li>Netflix在20016年举办的比赛</li>
<li>Yahoo在2011年KDD Cup也办了一个类似的歌曲推荐比赛</li>
</ul></li>
</ul></li>
</ul>
<h2 id="components-of-machine-learning">Components of Machine Learning</h2>
<p>应用信息： <img src="http://oky5aqxds.bkt.clouddn.com/1-3.png" alt="图1-2"></p>
<p>学习目标：批准这个用户的信用卡申请对银行是否有益。</p>
<ul>
<li>输入: <span class="math inline">\(x \epsilon X\)</span>，用户申请</li>
<li>输出: <span class="math inline">\(y \epsilon Y\)</span>，批准申请是好／是坏</li>
<li>需要学习的潜在模式： <span class="math display">\[f: X \rightarrow Y \]</span> 理想的信用卡批准定理</li>
<li>数据&lt;-&gt;训练例子： <span class="math display">\[D = \{(x_1, y_1), (x_2, y_2), \cdots, (x_N, y_N)\}\]</span> 学习到的信用卡批准定理</li>
</ul>
<p>问题符号化： <img src="http://oky5aqxds.bkt.clouddn.com/1-4.png" alt="图1-4"></p>
<p>可能的一些<span class="math inline">\(g \epsilon H = \{h_k\}\)</span>：</p>
<ul>
<li><span class="math inline">\(h_1\)</span>：年薪高于80万台币</li>
<li><span class="math inline">\(h_2\)</span>：负债大于10万台币</li>
<li><span class="math inline">\(h_3\)</span>: 参加工作不超过两年</li>
</ul>
<p>假设集合（hyposithesis set）<span class="math inline">\(H\)</span>:</p>
<ul>
<li>包含好的和坏的假设</li>
<li>由机器学习算法<span class="math inline">\(H\)</span>选择最好的<span class="math inline">\(g\)</span></li>
</ul>
<p>机器学习模型的定义：</p>
<blockquote>
<p>learning model = <span class="math inline">\(A\)</span> + <span class="math inline">\(H\)</span></p>
</blockquote>
<p>机器学习的实用定义： <img src="http://oky5aqxds.bkt.clouddn.com/1-5.png" alt="图1-5"></p>
<h2 id="machine-learning-and-other-fields">Machine Learning and Other Fields</h2>
<p>机器学习和数据挖掘的关系： <img src="http://oky5aqxds.bkt.clouddn.com/1-6.png" alt="图1-6"></p>
<p>机器学习和人工智能的关系： <img src="http://oky5aqxds.bkt.clouddn.com/1-7.png" alt="图1-7"></p>
<p>机器学习和统计学的关系： <img src="http://oky5aqxds.bkt.clouddn.com/1-8.png" alt="图1-8"></p>
<h2 id="summary">Summary</h2>
<p>什么时候机器可以学习？ <img src="http://oky5aqxds.bkt.clouddn.com/1-9.png" alt="图1-9"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://gtbai.github.io/2017/02/05/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
